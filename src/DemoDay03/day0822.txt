一、java的23种设计模式
大体分三类：
1.创建型模式：工厂方法模式、抽象工厂模式、单例模式，建造者模式、原型模式
2.结构型模式：适配器模式（万能的，例如手机充电线，可以适配各种手机）、装饰器模式（相当于在主体前后，装饰，没有实际意义）、代理模式（不干活，全权交给）、外观模式、桥接模式、组合模式、享元模式
3.行为型模式：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式
对于单例模式：限量生产：生产法拉利跑车

二、设计模式的六大原则
1.开闭原则：它是指对扩展开放，对修改关闭，在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。
（就像电脑上可以插任意品牌的显卡）为了程序的扩展性良好，易于维护和升级，想要达到这样的效果，我们就需要使用接口或者抽象类
2.里氏代换原则：它是面向对象设计原则之一，它实际是指任何基类（父类）可以出现的地方，子类一定可以出现，简称：LSP原则。LSP是继承和复用的基石，
只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。LSP原则是对
开闭原则的一种补充，所以LSP原则是对实现抽象化的具体步骤的规范。
3.依赖倒转原则：这是开闭原则的基础，具体的内容直接对接口进行编程，依赖于抽象而不依赖于具体。
4.接口隔离原则：使用多个隔离的接口，比使用单个接口要好，它还是一个降低类之间的耦合度的意思，从这可以看出设计模式就是一个软件的设计思想，从大型软件架构出发，为了
升级和维护的方便，应降低依赖，降低耦合。
5.迪米特法则：叫最少知道原则，也就是说一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。
6.合成复用原则：尽量使用合成、聚合的方式而不是使用继承（聚合的概念：去淘宝买一个桌子，拿到的桌子不是图片的样子，而是组装而成，每一块，桌面是桌面，桌腿是桌腿）

三、工厂方法模式：
它分三种：
1.普通工厂模式：就是建立一个工厂类，对实现统一接口的一些类进行实例的创建：SenderFactory
2.多个工厂方法模式：它是对普通工厂方法模式的一种改进，在普通方法当中，如果传递的字符串出错，则不能正确创建对象，而多个工厂方法模式是提供多个工厂方法分别来创建对象的。SenderFactory2
3.静态工厂方法模式：是将多个工厂方法模式设置为静态的，不需要创建实例，直接调用即可。SenderFactory3

四、单例模式：
它在设计模式中是一种常见的模式，在Java的应用中单例对象能保证在JVM中，该对象只有一个实例存在，这样做的好处如下：
1.某些类创建比较频繁，对于一些大型的对象，这是一笔很大的资源系统开销。
2.省去了new的操作符，降低系统内存的使用频率，也减轻了GC的压力
3.有些类如交易所的核心交易引擎，控制着交易的流程，如果该类可以创建多个的话，那么系统将完全紊乱，所以只能使用单例模式，才能保证核心
交易的服务器独立控制整个流程。（例如，股票市场，一个军队里只有一个司令）
创建对象，直接输出即打印对象的时候，得到的是：包名+类名+@+16进制的地址值，这是来自于Object的toString，因为任何一个类都是隐式继承Object
<1.私有化构造方法，2.提供一个公开方法并且返回值得类型就是它本身，（如何在外部调用，不可能在外部创建对象）-->静态修饰符给第三方提供便利，（但是如果这么写的话，不是单例，为了保证只能是一次的，那我要定义一个属性）
3.定义一个属性：由于是静态方法，所以也给属性加上静态修饰，private static Single；>

五、反射机制
JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法;对于任意一个对象，都能够调用它的任意方法和属性;这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。
以下的一些类是sun提供的一些反射机制的类
java.lang.Class<T>               Class c=0x5454    产生一个对象：画图展示
java.lang.reflect.Constructor<T> 提供了一个类的单个构造函数的信息和访问
java.lang.reflect.Field          提供有关类或接口的单个字段的信息和动态访问
java.lang.reflect.Method         A 方法提供有关类和接口上单一方法的信息和访问权限
java.lang.reflect.Modifier       Modifier类提供了static等访问修饰符

反射机制的作用就是反编译：
1. .class-->.java
2.通过反射机制访问java类的属性、方法、构造方法等...
<举例：创建Employees类和EmployeesTest>
//第一种获取类的信息
//加载字节码文件，路径不能出错
//怎么加载呢？
方法1：class里面的forName：是返回与给定字符串名称的类或接口相关联的类对象
Class c1=Class.forName("包名.类名");
方法2：
Class c2=Employees.class;
方法3：
Employees e=new Employees();
Class c3=e.getClass();

System.out.println(c1==c2)//true
System.out.println(c2==c3)//true


举例：Date类：DateTest
思考：原型是否可以实现反射int?
答：可以
Class i=int.class;
System.out.println(i);//输出结果：int

方法1：将A类加载：静态代码随着类的加载而加载，并且只加载一次，所以会输出
方法2：这种执行的方式是不会执行静态代码块
方法3：A a=new A(),在实例的过程中，已经加载了A类，所以会执行静态代码块

六、IO+Properties
dbinfo.properties（后缀名就是这个，不要瞎写,前面是文件名）像这样的文件我们一般称之为配置文件，以后将会有很多
配置的作用是什么？
就是使我们的程序更加的灵活

注意：一般在程序中可变的东西不要写死，基本上是推荐写到配置文件中，那么你在运行程序的时候将得到不同的结果
像properties文件又叫属性文件，属性文件中的数据要求：Key和value的形式存在的，其中可以使用空格、冒号、等号

七、反射机制+IO+Properties 联合应用动态创建java对象
