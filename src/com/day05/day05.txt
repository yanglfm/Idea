一、什么是序列化
	序列化是将堆内存中 的Java对象数据，通过某种方式把对象存储到磁盘文件中或者传递其他网络节点【这里意指在网路传输过程中】，这个过程称之为序列化
	通俗的来说就是将数据结构的对象转换成二进制串的过程。
	
二、什么反序列化
	它是把磁盘中的文件对象数据或者把网络节点上的对象数据，恢复成Java模型对象的过程，也就是将在序列化过程中所产生的二进制串转换成数据结构或者对象的过程。
	
三、为什么要做序列化？
	1.在分布式系统中，此时需要将对象在网络上进行传输，就得把对象数据转换成二进制形式，需要共享的数据的JavaBean对象，都得做序列化。
			
	2.服务器的钝化：如果服务器发现某些对象好久没有活动了，那么服务器就会把这些内存中的对象持久化到本地磁盘文件中【Java对象转换成二进制文件】，如果服务器
	发现某些对象需要活动的时候，先去内存中寻找，找不到再去磁盘文件中反序列化我们的对象数据，来恢复成Java对象，这样能节省服务器的内存。
	
四、Java是怎么进行序列化的？
	1.需要序列化对象的类，必须实现序列化接口：java.io.Serializable 这是一个标志性的接口 没有任何的抽象方法，Java中的大多数的类都实现了该接口	如String
	2.它的底层会判断，如果当前的对象时Serializable的一个实例，才允许做序列化，Java中可以使用关键字 instanceof Serializable来判断是否是序列化类型
	3.在Java中是使用对象流来完成序列化和反序列化的
			ObjectOutputStream：它是通过writeObject(Object obj)方法做序列化操作的
			ObjectInputStream：它是通过readObject()方法做反序列化的操作			
		
五、某些数据它不需要做序列化 比如说 密码 或 年龄
		使用关键字transient 实现无需实现序列化
		
	序列化还涉及版本的问题，版本由于项目的升级或者是修改，可能会对序列化对象进行修改，比如我增加一个字段，那么在反序列化的时候肯定会出问题的
	解决的方法：
		在JavaBean对象中增加一个字段	SerializableUID字段，它是用来固定这个版本的，无论我们怎么进行修改，那么版本都是一致的，这个
		就能正常实现反序列化	

六、Java Socket网络编程
	实现消息的通讯
		双向通讯  发送消息并接受消息





























