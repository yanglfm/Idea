一、Java的23种设计模式
大体会分三类：
	1.创建型模式：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式
	2.结构型模式：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式
	3.行为型模式：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式

二、设计模式的六大原则
	1.开闭原则
		它是指对扩展开放，对修改关闭，在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。
		为了程序的扩展性良好，易于维护和升级，想要达到这样的效果，我们就需要使用接口或者是抽象类。
	2.里氏代换原则
		它是面向对象设计原则之一，它实际是指任何基类可以出现的地方，子类一定可以出现，LSP是继承和复用的基石，只有当衍生类可以替换掉基类，软件单位
		的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。LSP原则是对开闭原则的一种补充，所以LSP原则是对实现抽象化
		的具体步骤的规范。
	3.依赖倒转原则
		这个是开闭原则的基础，具体的内容直接对接口进行编程，依赖于抽象而不依赖与具体。
	4.接口隔离原则
		使用多个隔离的接口，比使用单个接口要好，它还是一个降低类之间的耦合度的意思，从这可以看出设计模式就是一个软件的设计思想，从大型软件架构出发，为了
		升级和维护的方便，应降低依赖，降低耦合。
	5.迪米特法则
		叫最少知道原则，也就是说一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。
	6.合成复用原则
		尽量使用合成、聚合的方式而不是使用继承
		
三、工厂方法模式：
		它分3种：
			1.普通工厂模式：
						就是建立一个工厂类，对实现统一接口的一些类进行实例的创建			
						
			2.多个工厂方法模式：它是对普通工厂方法模式的一种改进，在普通工厂方法中，如果传递的字符串出错，则不能正确创建对象，而
			多个工厂方法模式是提供多个工厂方法来分别创建对象的。
			
			3.静态工厂方法模式，是将多个工厂方法模式设置为静态的，不需要创建实例，直接调用即可。
				
四、单例模式
	它在设计模式中是一种常见的模式，在Java的应用中单例对象能保证在JVM中，该对象只有一个实例存在，这样的做的好处如下：
		1.某些类创建比较频繁，对于一些大型的对象，这是一笔很大的资源系统开销。
		2.省去了new的操作符，降低系统内存的使用频率，也减轻了GC的压力
		3.有些类如交易所的核心交易引擎，控制着交易的流程，如果该类可以创建多个的话，那么系统将完全紊乱，所以只能使用单例模式，才能保证
		核心交易的服务器独立控制整个流程。
		
五、反射机制
	以下的一些类是sun提供的一些反射机制的类
	java.lang.Class<T>               Class c=0x5454
	java.lang.reflect.Constructor<T> 提供了一个类的单个构造函数的信息和访问。 
	java.lang.reflect.Field          提供有关类或接口的单个字段的信息和动态访问。
	java.lang.reflect.Method         A 方法提供有关类和接口上单一方法的信息和访问权限。
	java.lang.reflect.Modifier       Modifier类提供了static方法和常量来解码类和成员访问修饰符。
	
	反射机制的作用就是反编译：
				1. .class--->.java
				2. 通过反射机制访问Java类的属性、方法、构造方法等...
	        //方法1 java.util.Date
    		Class c1 = Class.forName("java.util.Date");
    		System.out.println(c1);

    		//方法2
    		Class c2 = Date.class;
    		System.out.println(c2);

    		//方法3
    		Date d = new Date();
    		Class c3 = d.getClass();
    		System.out.println(c3);

    		System.out.println(c1==c2);
    		System.out.println(c2==c3);

    		//原型是否可以实现反射 int 可以
    		Class i = int.class;
    		System.out.println(i);
	
六、IO+Properties
	dbinfo.properties 像这样的文件我们一般称之为配置文件，以后将会有很多
	配置的作用是什么？
			就是使我们的程序更加的灵活
			
			注意：一般在程序中可变的东西不要写死，基本上是推荐写到配置文件中，那么你在运行程序的时候将得到不同的结果						
			
			
			属性文件中的数据要求：
				key和value的形式存在的，其中可以使用空格、冒号、等号

七、反射机制+IO+Properties 联合应用动态创建Java对象






























