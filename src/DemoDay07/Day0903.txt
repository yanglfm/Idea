（1）单行插入：
1.insert into 表名 values（所有字段）
2.insert into 表名（选择的字段） values（一一对应前面的字段）
（2）修改（语法）
update 表名 set 列=值，列=值 where
（3）序列
       序列用于按照指定的规则自动生成数据，如人员的编号等
       在建表时很多时候表中并无合适的主键，可以使用序列并将该序列作为表中的主键

创建序列
       create sequence 序列名称

       start with     起始数
       increment by  增长数
       maxvalue      最大值
       minvalue      最小值//最小值的设定应该与起始数一样
       使用方法：序列名.nextval
（4）首先都是删除数据的功能
delete from 表名，有日志记录，在没有提交数据的时候，可以做回滚操作
truncate 不做日志记录，大批量数据删除效率快，
正常工作环境中，宁可添加数据也不可删除数据，因为可能会牵连其他的表


---------------------------------------------------
20180903AM
--6.sql
查询数据
查询得到的新表是不存在的，在物理环境中不存在，一般称
之为视图，可以在这个新视图的基础上继续查
第六章 查询
1.查询的基本语法
  select * from 表名 where 条件
  select 字段1，字段2 from 表名 where 条件
select * from emp；
select ename，sal,deptno from emp;
select ename，sal,deptno from emp where deptno=20;//;

2.在查询得出的虚拟表中继续查询
select */字段 from （select * from 表名）表别名
（一般写字段，不写*）
----给emp取个别名查询上面的字段
select e.empno,e.ename,e.job,e.mgr from emp e;//e代表emp这张表，类似于this.zi字段
-----给字段取个别称
select ename as 姓名，sal as 薪水,deptno as 部门编号 from emp where deptno=20;//;
-----子查询一种简单表达形式
select mgr from (select * from emp) e;
select ename,mgr from (select * from emp) e;
-----子查询的过程中内部其查询表中的字段 必须出现被查询的字段中，否则就会爆字段找不到的错误信息： ora--00904
select ename,mgr from (select ename,sal from emp) e;//这个时候查询不到，因为里面的那个没有mgr这个字段
-----查询学生为1005号的学生信息（根据条件来）
select * from stu where stuid=5；
-----条件也可以跟多个 查询学生是5号学生 并且性别是男生
select * from stu where stuid =5 and sex='男'；
-----查询性别是男或者年龄是20-22岁之间的学生
select * from stu where sex='男' or (age>=20 and age<=22);
select * from stu where sex='男' or age between 20 and 22;
select * from stu where sex='男' or age in (20,21,22);

【select * from (select * from stu where sex='男') stu where age between 20 and 22;
select stuid,stuname from (select * from student where address is not null) st order by stuid asc,stuname desc;
select stuid,stuname from (select * from student where address is not null) st where stuname is not null;】

-----排序查询
select 列名 from 表名 where 条件 order by 列；
以emp中sal 薪资排序
select * from emp order by sal;//升序排序
-----排序分 升序和降序 asc desc,默认使用升序（不写）
select * from emp order by sal asc;//升序(where条件可以不写)
select * from emp order by sal desc;//降序
-----根据工种
select * from emp where job='manager' order by sal desc;//降序
-----根据部门
select * from emp order where deptno=20 by sal desc;//降序
-----查询jobs 薪水区间的总数是多少？
select * from jobs;
select min_salary + max_salary 薪资总数 from jobs；
-----查询员工表employees 员工姓名的全称
select * from employees
create table employess as select select * from hr.employees;
-----拼接 字段
select concat(first_name,last_name)from employess;
select first_name ||last_name 姓名 from employess;
-----查询每个员工加薪500后的所有信息 姓名 薪资 部门编号
select first_name || last_name 姓名 ,salary+500,e.department_id from employees e;

常用的ORACLE函数
1.字符函数
2.日期函数
3.数值函数
4.转换函数

TO_CHAR:转换成字符类型并规范格式
TO_DATE:将字符串转换成DATE类型【前提是以日期格式为主的字符串】//不能随便一个字符串
TO_NUMBER：将字符转换成数值类型

一、日期转换格式
YYYY        完整年份
MM           月份
DD            天数
HH24        24制小时
MI             分钟
SS              秒
YEAR        年份拼写
RR            数值年份的最后2位
MON       月份字母缩写
DAY          星期

二、数值转换格式
9        任意数值
0        以0显示
L        本地系统货币符号
.         小数点
,         千位符
$         以$显示

dual是一张伪表，它是查询一行一列的表格，它是一张虚表或者称它是一种视图，就像之前查询序列号是一样的
select sysdate from dual;//查询当前系统的时间的简单方式
-----查询今天是星期几？
select to_char(sysdate,'DAY') from dual;//这是用来转化字符的 //星期一
select to_char(sysdate,'MM') from dual;//这是用来转化字符的//09
select to_char(sysdate,'MON') from dual;//9月
select to_char(sysdate,'yyyy') from dual;//2018,大小写无所谓
select to_char(sysdate,'rr') from dual;//18,年份的最后两位
select to_char(sysdate,'hh24') from dual;//11,年份的最后两位,HH24:14 hh:02
select to_date('2018-02-22','yyyy-MM-DD') from dual;
--------------------------------------------------------------

----------20180903PM
-----9   任意数值
select to_char(5432109.6456,'999999.99') from dual;//四舍五入//5432109.65
-----0   以0显示，如果数值长度不够使用0补位
select to_char(5432109.6456,'000000000') from dual;//00543110
-----L   本地系统货币符号
select to_char(5432109.6456,'L00,000,000.00') from dual;//?00，543,109.65//不足的话会进行补位
-----$   以$显示
select to_char(salary,'$99,999,999.99')from employees;//$24,000.00//不足的话不会进行补位

-----to_number 将字符串转换成数值 ?12,312.33
select to_number('?12,312.33','L99999.99') from dual;//由人民币转换为数值、、

----UPPER 转换成大写
select upper('jack')from dual；//JACK
----LOWER 转换成小写
select lower('JACK') from dual;//jack
----initcap 将首字母转换成大写
select initcap('jack')from dual;//Jack
----concat 字符串连接/拼接
select concat('hello','world')from dual;//concat的参数个数仅限于两个，不能多个
注意：参数个数无效 仅仅限定两个参数
select concat('hello','world','123456')from dual;//这个是错误的
-----length 获取字符串的长度
select length('hello')from dual;//5
-----LPAD 代表左填充
--第一个参数表示源字符串
--第二参数表示填充的长度
--第三参数表示要填充的字符
select lpad('hello,3,'*')from dual;//hel
select lpad('hello',7,'*');//**hello
-----RPAD代表右填充
select rpad('hello',7,'*');//hello**,当你位数不足时（与中间的位数比较），在左边补右边的字符，或者在右边补右边的字符
-----LTRIM代表去除左边的空格
select ltrim(' hello ')from dual;//hello //
-----RTRIM代表去除左边的空格
select rtrim(' hello ')from dual;// hello//
-----TRIM代表去除两边的空格
select trim(' hello ')from dual;//hello//
-----INSTR 获取查询字符串的索引
select instr('hello','l')from dual;//3
select instr('hejlo','l')from dual;//4//从1开始算，算的是第一个遇到的索引值
-----想要获取第二个指定的字符
--第一参数源字符串
--第二参数需要找的字符
--第三参数寻找字符的起始位置 注意：索引从1开始
--第四参数 指定第几次出现的字符
select instr('hello','l',4)from dual;//4
select instr('helsdfdslo','l',4)from dual;//9

select first_name || last_name from employees;//第二次出现的位置
select instr(first_name || last_name,'n',1,2) from employees;
----substr 截取字符串
--第一参数表示的是源字符串
--第二参数表示的是起始位置
--第三参数表示的是截取的长度
select substr('hello syjy',7)from dual;//syjy从7这个位置开始，到截止的位置
select substr('hellosyjy',4,5)from dual;//losyj从第四个位置开始，截取五个
----replace 替换指定的字符内容
--第一参数表示的是源字符串
--第二参数表示的是准备替换的字符
--第三参数表示的是替换的字符
select replace（'hello','l','w'）from dual；//hewwo

//作业1：截取，转换

---------日期函数：
1. sysdate 代表当前系统时间
          select sysdate from dual;
          select to_char(sysdate,'yyyy') from dual;
          select to_date(sysdate,'yyyy') from dual;

select to_date('21-09-18','yyyy-mm-DD')from dual;(可以)
--select to_date(sysdate,'YYYY-MM-DD') from dual;?????
 改为： select to_date(to_char(sysdate,'yyyy-MM-dd'),'yyyy-MM-dd') from dual;
2.extract 获取时间单位
----获取年份，月，日
select extract(year from sysdate)from dual;
select extract(month from sysdate)from dual;
select extract(day from sysdate)from dual;
--时、分、秒？？？？
 select to_char(sysdate,'hh24') from dual;
 select to_char(sysdate,'mi') from dual;
 select to_char(sysdate,'ss') from dual;
获取当月生日的员工姓名和生日字段信息
select first_name||last_name,hire_date from employees where extract(month from hire_date)=extract(month from sysdate);
--MONTHS_BETWEEN 计算月差 假设2017-02-11到当前系统时间
select months_between (sysdate,to_date('2017-02-11','yyyy-MM-dd'))from dual;
--ADD_MONTHS 添加月份
select add_months(sysdate,1) from dual;//2018-10-3,在系统的时间基础上加一个月
--NEXT_DAY 下一个星期数
select next_day(sysdate,'星期一')from dual;
--LAST_DAY 当月的最后一天
select next_day(sysdate)from dual;//2018/9/30
--ROUND 对日期四舍五入
select round(15.6)from dual;//16
select round(to_date('2017-07-16','YYYY-MM-DD'),'month') from dual;//2017/8/1,
对于月份而言：如果日期没有过半，则变为2017/05/01
对于年份而言：如果月份没有过半，则变为2017/01/01
--TRUNC获取特定时间
获取这个星期的第一个星期天的日期
--获取这个一年的第一天的日期
select trunc(sysdate,'DAY')from dual;//2018/9/2
select trunc(sysdate,'YEAR')from dual;//2018/1/1
select trunc(sysdate,'MONTH')from dual;//2018/9/1

-------------数值函数
--ABS 绝对值
select ABS（-45）from dual；//45
select ABS(45）from dual；//45
select ABS(-45.55）from dual；//45.55
--CEIL 向上取整
select ceil（12.56）from dual；//13
select ceil（12.1）from dual；//13
--FLOOR 向下取整
select floor（12.56）from dual；//12
select floor（12.1）from dual；//12
--power 幂次方
select power（2,3）from dual；//2的三次方：8
--ROUND 四舍五入
select round（12.1）from dual；//12
select round（12.56）from dual；//13,四舍五入，砍掉小数
--SQRT 平方根
select sqrt(16)from dual;//4，直接开方
select round(sqrt(17),0）from dual;//4
select round(sqrt(17),2）from dual;//4.12//后面的2表示保留两位小数
--TRUNC 数值截断
----第二参数代表保留小数点 左边负3位，以0补足
select trunc(145587.32323,-3)from dual;//145000
select trunc(145587.32323,-5)from dual;//100000
--MOD 整数取余
select mod(4,3) from dual;//1

练习：
select * from employees;
---查询hire_date日期是星期几
select first_name,to_char(hire_date,'DAY') from employees;
---查询是星期三出生的所有员工的信息
select * from employees where to_char(hire_date,'DAY')='星期三';
---将emp表中的姓名全部改成大写（两个字段拼接）
select upper(first_name||last_name) from employees;
---将emp表中的姓名首字母改成大写，其余小写
select INITCAP(first_name||last_name) from employees;

---rowid 是数据表中的一个隐藏列 其目的是为了区分每一行的一个实体
select rowid ,e.* from employees e;//查rowid
//取别名：e.*就相当于一个字段
---rownum 是为查询结果的每一行添加一个行的序列号 行号从1开始
select rownum,e.* from employees e;//查这个序列号，自己编号，就是在前面一列是以1开始的数值
---查询emp 表中的前5条数据；
select rownum,e.* from employees e where rownum between 1 and 5;//
---查询emp 表中薪资最高的前五个人的信息
---子查询：一般是先将查询结果映射成一张表，把这张结果表看做是一张虚拟表t，
这个t就是虚拟表的别称，至于虚拟表中出现的字段，（就是在虚拟表中有的字段）有的字段
可以通过t.字段名来查询，没有的字段是不会被查询得到的
---到目前为止关键字的几个顺序 select from where order by(这个要先做！！！)
---在emp 表中查询工资由高到低的方式部门编号为80号部门的前三位员工的姓名以及收入
select t.first_name||t.last_name,t.salary from
(select * from employees e where department_id=80 order by salary desc) t //t相当于表别名
where rownum between 1 and 3;

//自己做表，自己插入数据 avg
----查询下周的第一天是几几年几月几号  时分秒
select next_day(sysdate,1)from dual;
select * from student where to_char(birthday,)