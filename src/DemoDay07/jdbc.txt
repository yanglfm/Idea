1.JDBC的基本概述
一、本章目标
1.掌握JDBC的实现原理
2.熟练掌握使用JDBC连接数据库
3.熟练掌握JDBC中各个对象的使用

二、什么是JDBC？
JDBC(Java Data Base Connectivity)JAVA连接数据库技术的简称，
是JAVA连接各种数据库的能力
JDBC：充当桥梁的作用

1.驱动管理类：路径，用户名和密码
2.链接，和打开，程序和数据的接口
3.打开之后，写一些SQL文，处理器，处理SQL文
4.处理SQL文有多种处理方式
单条数据、多条数据，迭代遍历多条应用程序

三、JDBC的工作原理
1.装在驱动管理器程序
2.获取数据库的连接
3.使用statement或者PreparedStatement执行SQL文
4.返回执行结果：两种情况：
                  第一种：增删改 只要判断是否成功即可 返回boolean类型
                  第二种：查询   返回有可能是多条语句 因此应该塞入结果集中ResultSet 由它来进行结果的遍历
5.关闭相关的连接

四、JDBC是由两个部分组成：JDBC API 和JDBC Driver interface
            JDBC API：它是提供给开发者的一组独立数据的API，
            对任何数据的操作，都可以使用这组API来进行，那么
            要把这组通用的API翻译成特定数据库能懂的指令，那
            么就要由JDBC Driver interface来实现
            JDBC Driver interface ：它是面向JDBC驱动程序开发商的
            编程接口，它会把我们通过JDBC API发给数据库的通用指令
            翻译给他们自己的数据库，为了使客户端程序独立于特定的
            数据库驱动程序JDBC的规范，建议开发者使用接口编程方式，
            即尽量使用依赖java.sql及javax.sql中的接口和类。

五、JDBC中的主要四个成员：
      1.DriverManager类
      2.Connection接口
      3.Statement接口
      4.ResultSet接口
  JDBC驱动是由不同数据库厂商提供，对各自数据库进行JDBC实现有各自的驱动包，具体可参看各数据库厂商官网

六、JDBC的功能主要实现如下的一些处理方式：
  1.将应用程序与数据库进行连接
  2.执行sql语句
  3.将执行的语句得到的结果返回应用程序
  各个类和接口负责功能如下：
       1.DriverManager 负责管理加载驱动
       2.Connection    负责对数据库的连接
       3.Statement     由Connection接口产生，负责执行sql语句
       4.ResultSet     保存Statement执行得到的结果

七、JDBC连接数据库：
   1.JDBC连接数据库的方式主要有ODBC连接和纯Java驱动连接
   2.ODBC连接时需要配置当前系统的数据源
   3.JDBC不依赖于当前系统环境，直接由驱动获取连接

八、JDBC进行数据库访问的操作步骤如下：
   1.加载数据库驱动包
   2.通过驱动管理获取应用程序和数据库的连接
   3.通过连接获取处理器对象
   4.使用处理器执行SQL语句
   5.将执行得到的结果返回应用程序
   6.关闭使用到的各个对象

九、ODBC连接
加载驱动
Class.forName(“sun.jdbc.odbc.JdbcOdbcDriver”);
打开连接
Connection=DriverManager.getConnection(“jdbc : odbc :  数据源名称”)

十、ODBC的配置：
   1.控制面板--》管理工具--》数据源ODBC--》填写相应的参数
   2.在程序职工添加ODBC驱动包
   3.测试代码

十一、JDBC连接数据库
加载驱动
Class.forName(“oracle.jdbc.driver.OracleDriver”);
获取连接
Connection con=DirverManager.getConnection(“jdbc:oracle:thin:@IP:端口:实例名” , ”用户名” , ”密码”)
   操作过程：
   1.添加驱动包ojdbc14.jar
   2.导入驱动包到当前项目中
   3.测试代码


--localhost

//后续的程序......
所以就涉及到关闭

finally{
  conn.close();
   }

//插入语句
//创建处理器对象
Statement stmt=conn.createStatement();
//创建SQL文
String sql ="insert into test values(1003)";
//执行
int count =stmt.executeUpdate(sql);//返回int类型的值
if（count>0）{
sout(“插入成功”)；
}else{
sout（“插入失败”）；
}

20180910PM
十二、PreparedStatement 预处理器
   是先由编译好的SQL文注入到当前处理器中进行数据操作，显然它
   在执行效率上回高于Statement处理器，（它是将已经将处理好的数据封装了）
   而Statement是来一个处理一个，它的好处是可以防止我们SQL文的注入
   假设某些程序或者线程进入此处将此处的值给串改了

十三、PreparedStatement与Statement有些什么区别？
   1.预处理器可以将要执行的sql文先进行编译，下次再执行的时候
   可以直接执行已经编译好的代码，普通处理器每次执行度需要进行编译
   2.预处理器使用参数注入的方式增强了sql操作的安全性，防止外部参数
   恶意注入

十四、处理器的好处
     它可以实现批处理：就是可以同时实现添加、删除、修改等操作，
     一次性完成

十五、使用CallableStatement执行存储过程
CallableStatement  cstmp=con. prepareCall(“ {call  过程名}”);

//也可以使用?进行占位，实现参数注入
cstmp.setInt(索引,参数);

//执行
cstmp.execute();

CallableStatement  cstmp=con. prepareCall(“ call  {过程名} ”);

//注册输出参数
cstmp.registerOutParameter(索引, oracle.jdbc.OracleTypes.CURSOR);
//执行
cstmp.execute();

//获取输出游标
ResultSet rs=(ResultSet)cstmp.getObject(1)

------------------------------
Date:
Timestamp:之间转换