一、什么是序列化
序列化是将堆内存中的java对象数据，通过某种方式把对象存储到磁盘文件中或者
传递其他网络节点（这里意指在网络传输过程中），这一过程称之为序列化。
通俗的来说，就是将数据结构的对象转换成二进制串的过程。

二、什么是反序列化
它是把磁盘中的文件对象数据或者网络节点上的对象数据恢复成java模型对象的过程，
也就是将在序列化过程中所产生的二进制串转换成数据结构或者对象的过程。

三、为什么要做序列化？
之前创建的任意类型的对象不进行序列化又会怎么样？
1.在分布式系统中，此时需要将对象在网络上进行传输，就得把对象数据转换成二进制形式，
需要共享的数据的JavaBean对象，都得做序列化。（主要存放类，类的属性，实体类，顶多set，
get方法，业务逻辑不放这里面）

2.服务器的钝化：如果服务器发现某些对象好久没有活动了，那么服务器就会把这些内存中的对象
持久化到磁盘文件中（java对象转换成二进制文件），如果服务器发现某些对象需要活动的时候，
先去内存中寻找，找不到再去磁盘文件中反序列化我们的对象数据，来恢复成java对象，这样能
节省服务器的内存

四、java是怎么进行序列化的？
1.需要序列化对象的类，必须实现序列化接口：java.io.Serializable 这是一个标志性的接口，
没有任何抽象方法（只是一种声明）,(有点像抛异常)，Java中的大多数的类都实现了该接口，如String
2.它的底层会判断，如果当前的对象是一个Serializable的一个实例，才允许做序列化，java中可以使用
关键字instanceOf Serializable来判断是否是序列化类型
3.在Java中是使用对象流来完成序列化和反序列化的
ObjectOutputStream：它是通过writeObject（Object obj）方法做序列化操作的
ObjectInputStream：它是通过readObject（）方法做反序列化的操作

五、某些数据它不需要做序列化，比如说密码或年龄
使用关键字transient 实现无需实现序列化（不要序列化）（例如：transient private int age）
加上之后，读出的数据是：基本数据类型是：0，引用数据类型是：null,就是它的原型

序列化还涉及版本的问题（游戏的更新，不能跳过）版本由于项目的升级或者是修改，
可能会对序列化对象进行修改，比如我增加一个字段，那么在进行反序列化的时候肯定会出问题的
解决的方法：
在JavaBean对象中增加一个字段   SerializableUID字段，它是用来固定这个版本的，无论
我们怎么进行修改，那么版本都是一致的，这个就能正常实现反序列化。就是序列化，无论你怎么改，这个版本是一致的。

六、Java Socket网络编程
实现消息的通讯（举例：我们玩的QQ）
双向通讯：发送消息并接受消息

七、通过客户端socket与服务端server之间的通讯过程
1.客户端通过IP和端口连接到指定的server，然后通过socket获取输出流，并向其输出内容，
服务器会获得消息，最终由服务器端由（的）控制台输出打印，通过第一个socket案例，我们
应该掌握并了解socket服务端和客户端的一些基本编程，传输过程中统一指定字符编码格式，
防止乱码的产生。
2.消息通讯过程中的优化，双向通讯发送消息并接受消息
